In paper Section 6 (Performance Evaluation), Figure 5 presents the performance results of Sulfur on the Embench-IoT benchmark suite. 
Each data point represents the average of 10 runs, and the overall overhead is reported as the geometric mean of per-benchmark slowdown 
ratios. The results show that Sulfur on Linux introduces only ~1.67% overhead relative to the baseline, indicating a negligible impact on 
execution time. By contrast, CFA incurs substantially higher overheads, with ~59.88% on Linux and ~62.99% on Sulfur. Furthermore, CFA-Sulfur
demonstrates only a modest additional slowdown of ~1.94% compared to CFA-Linux. These findings clearly suggest that the performance 
degradation is primarily attributed to CFA, while Sulfur itself imposes virtually no measurable overhead.

In paper Section 6 (Performance Evaluation), Figure 7 reports the overhead incurred by Sulfur on system operations, as measured using 
LMBench micro-benchmarks. The results indicate substantial increases in system call and kernel operation latencies compared to Linux. For 
instance, the null system call shows the highest overhead at ~452.81%, while operations such as read (~281.94%), write (~308.40%), and 
signal handler installation (~259.21%) also experience significant slowdowns. Moderate overheads are observed for stat (~58.81%), 
open/close (~76.77%), and signal dispatch (~56.52%), whereas page faults incur the lowest overhead at ~35.50%. Context switching overhead 
is ~108.58%, reflecting the additional scheduling complexity introduced by Sulfur. Overall, these results show that while Sulfur maintains 
functional correctness, it introduces considerable latency in low-level system operations due to its additional safety and monitoring 
mechanisms.


We provide a run.sh script to facilitate reproducing the results. For the baseline configuration, benchmarks can be executed using run.sh 
baseline. In the FVP environment, the same procedure applies by invoking the script located at /usr/bin/run.sh with the same argument. An 
identical workflow is used for executing Sulfur. The expected/ directory contains the reference outputs, including separate logs for both 
the baseline and Sulfur runs. For detailed instructions on obtaining these results, please refer to Steps 4 and 5 of the Steps to Build and 
Run section in the README.

It is important to note that the results produced in the FVP environment differ from those reported in the paper. The measurements presented
in the paper were obtained on a Raspberry Pi 3 B+ platform, whereas the artifact is evaluated using the FVP setup. As a result, the 
performance numbers obtained in FVP are not expected to exactly match those reported in the paper. To reproduce the precise results, the 
implementation must be ported to the Raspberry Pi 3 B+. We are happy to provide guidance and support should reviewers wish to conduct 
experiments on Raspberry Pi.


Please run the run.sh script in /usr/bin folder FVP terminal 0 for running the Lmbench and Embench benchmarks.


Baseline 
----------------------------


Running LmBench................
Creating a 50MB file filled with zeros: 'largefile'...
1+0 records in
1+0 records out
File 'largefile' created.

Measuring system call latency: NULL
Simple syscall: 23.0621 microseconds

Measuring system call latency: READ on 'largefile'...
Simple read: 25.1448 microseconds

Measuring system call latency: WRITE on 'largefile'...
Simple write: 24.6711 microseconds

Measuring system call latency: STAT on 'largefile'...
Simple stat: 42.1654 microseconds

Measuring signal installation latency...
Signal handler installation: 29.7567 microseconds

Measuring context switch latency with 6 processes...

"size=0k ovr=75.41
6 82.91

Measuring page fault latency with 'largefile'...
Pagefaults on largefile: 13.2238 microseconds

All latency tests completed.
Running Embench....................
Running basicmath_small:
  Baseline time: 10.43
  Blast time: 11.21

Running crc_32:
  Baseline time: 62.13
  Blast time: 942.58

Running libedn:
  Baseline time: 106.38
  Blast time: 328.46

Running libhuffbench:
  Baseline time: 59.11
  Blast time: 215.26

Running libminver:
  Baseline time: 17.15
  Blast time: 78.76

Running libst:
  Baseline time: 2.67
  Blast time: 44.04

Running libud:
  Baseline time: 73.85
  Blast time: 237.28

Running matmult-int:
  Baseline time: 116.63
  Blast time: 349.54

Running mont64:
  Baseline time: 54.57
  Blast time: 209.51

Running nbody:
  Baseline time: 1.68
  Blast time: 4.99

Running nettle-aes:
  Baseline time: 67.41
  Blast time: 100.75

Running nettle-sha256:
  Baseline time: 58.90
  Blast time: 74.82

Running primecount:
  Baseline time: 66.79
  Blast time: 254.54

Running sglib-combined:
  Baseline time: 68.28
  Blast time: 475.74

Running tarfind:
  Baseline time: 16.91
  Blast time: 207.55




Sulfur 
-----------------------------



Running LmBench................
Creating a 50MB file filled with zeros: 'largefile'...
1+0 records in
1+0 records out
File 'largefile' created.

Measuring system call latency: NULL
Simple syscall: 22.8992 microseconds

Measuring system call latency: READ on 'largefile'...
Simple read: 25.1364 microseconds

Measuring system call latency: WRITE on 'largefile'...
Simple write: 24.6071 microseconds

Measuring system call latency: STAT on 'largefile'...
Simple stat: 41.8947 microseconds

Measuring signal installation latency...
Signal handler installation: 29.7540 microseconds

Measuring context switch latency with 6 processes...

"size=0k ovr=75.30
6 79.20

Measuring page fault latency with 'largefile'...
Pagefaults on largefile: 13.2295 microseconds

All latency tests completed.
Running Embench....................
Running basicmath_small:
  Baseline time: 10.43
  Blast-Sulfur time: 11.20

Running crc_32:
  Baseline time: 62.15
  Blast-Sulfur time: 942.57

Running libedn:
  Baseline time: 106.38
  Blast-Sulfur time: 328.55

Running libhuffbench:
  Baseline time: 59.12
  Blast-Sulfur time: 215.25

Running libminver:
  Baseline time: 17.15
  Blast-Sulfur time: 78.76

Running libst:
  Baseline time: 2.67
  Blast-Sulfur time: 44.02

Running libud:
  Baseline time: 73.85
  Blast-Sulfur time: 237.32

Running matmult-int:
  Baseline time: 116.65
  Blast-Sulfur time: 349.55

Running mont64:
  Baseline time: 54.56
  Blast-Sulfur time: 209.54

Running nbody:
  Baseline time: 1.68
  Blast-Sulfur time: 4.99

Running nettle-aes:
  Baseline time: 67.38
  Blast-Sulfur time: 100.76

Running nettle-sha256:
  Baseline time: 58.92
  Blast-Sulfur time: 74.85

Running primecount:
  Baseline time: 66.76
  Blast-Sulfur time: 254.61

Running sglib-combined:
  Baseline time: 68.30
  Blast-Sulfur time: 475.74

Running tarfind:
  Baseline time: 16.90
  Blast-Sulfur time: 207.48
